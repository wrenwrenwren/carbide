/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.RoundingMode;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.bouncycastle.util.test.Test;
import static presentation.data_entry.writeToCSV;

/**
 *
 * @author ren
 */
public class account_manager_frame extends javax.swing.JFrame {

    /**
     * Creates new form account_manager_frame
     */
    public account_manager_frame() {
        initComponents();
        
        String homedirec = System.getProperty("user.home");
        String carbide_dir = homedirec + "/carbide";
        
        if (!new File(carbide_dir).exists()) {
            new File(carbide_dir).mkdir();
        }
        
    }
    
    float epsilon = (float) 0.00001;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        jMenuItem5.setText("jMenuItem5");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Data Entry");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Reports");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Aggregate Positions");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carbide.jpg"))); // NOI18N

        jButton3.setText("Back Up Entries");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Open PDF");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("View CSV");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Accounts");

        jMenuItem8.setText("View Accounts");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem6.setText("Add a New Account");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Delete a Account");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);
        jMenu2.add(jSeparator1);

        jMenuItem3.setText("Allocation Weights");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Hedge Accounts");

        jMenuItem9.setText("View Hedge Accounts");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setText("Add a New Hedge Account");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setText("Delete a Hedge Account");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);
        jMenu5.add(jSeparator2);

        jMenuItem12.setText("Allocation Weights ");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem12);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Macro Accounts");

        jMenuItem13.setText("View Macro Accounts");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem13);

        jMenuItem14.setText("Add a New Macro Account");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem14);

        jMenuItem15.setText("Delete a Macro Account");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem15);
        jMenu6.add(jSeparator3);

        jMenuItem16.setText("Allocation Weights ");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem16);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        JFileChooser filechooser = new javax.swing.JFileChooser();
        
        int returnVal = filechooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            String filename = filechooser.getSelectedFile().getName();
            String extension = filename.substring(filename.lastIndexOf("."), filename.length());
            String filename_only = filename.substring(0, filename.lastIndexOf("."));

            if (!".pdf".equals(extension)) {
                JOptionPane.showMessageDialog(filechooser, "Invalid file type!!! Please choose a pdf file!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                    FileInputStream input = null;
                    
                    String filepath = file.toString();
                    String output_path = filepath.substring(0, filepath.lastIndexOf("."));
                    
                    System.out.println(filepath);
                    System.out.println(filename_only);
                    System.out.println(output_path);

                    
                    String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();
                    
                    try {
                        String decodedPath = URLDecoder.decode(path, "UTF-8");
                        System.out.println(decodedPath);
                        String command = "java -jar " + decodedPath + " -p all -o " + output_path + ".csv " + filepath;
                        System.out.println(command);
                        
                        Process process = Runtime.getRuntime().exec(command);

                        System.out.println("Tabula DONE!");
                        
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                    

                    

            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        JFileChooser filechooser = new javax.swing.JFileChooser();

        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            String filename = filechooser.getSelectedFile().getName();
            String extension = filename.substring(filename.lastIndexOf("."), filename.length());

            if (!".csv".equals(extension)) {
                JOptionPane.showMessageDialog(filechooser, "Invalid file type!!! Please choose a csv file!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                BufferedReader br = null;
                try {
                    String[] columnNames = new String[0];
                    Object[][] data = new Object[0][0];
                    String line = "";
                    String splitSign = ",";
                    
                    int i = 0;
                    //initialize the data array
                    br = new BufferedReader(
                            new FileReader(file));
                    while (br.readLine() != null) {
                        i++;
                    }
                    br.close();
                    data = new Object[i - 1][];
                    i = 0;
                    br = new BufferedReader(new FileReader(file));
                    line = br.readLine();
                    columnNames = line.split(splitSign);
                    
                    String[] rowNumber = {"#"};
                    
                    String[] newcolumnNames = new String[rowNumber.length + columnNames.length];
                    System.arraycopy(rowNumber, 0, newcolumnNames, 0, 1);
                    System.arraycopy(columnNames, 0, newcolumnNames, 1, columnNames.length);                    
                    
                    line = br.readLine();
                    while (line != null) {
                        data[i] = new Object[line.split(splitSign).length + 1];
                        data[i][0] = i + 1;
                        for (int j = 1; j < data[i].length; j++) {
                            data[i][j] = line.split(splitSign)[j - 1];
                        }
                        i++;
                        line = br.readLine();
                    }
                    
                    
                    data_view readcsvfiles = new data_view(data, newcolumnNames);
                    readcsvfiles.setTitle(filename);
                    readcsvfiles.setVisible(true);
                    readcsvfiles.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        data_entry dataentry = new data_entry();
        dataentry.setTitle("Data Entry");
        dataentry.setVisible(true);
        dataentry.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        report_view reportview = null;
        try {
            reportview = new report_view();
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        reportview.setTitle("Report View");
        reportview.setVisible(true);
        reportview.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Combined_Data_Entry";
        String primary_dataentry_path = homedirec + "/carbide/Data_Entry";
        
        File folder = new File(primary_dataentry_path);
        File[] listOfFiles = folder.listFiles();
        
        int numFile = 0;
        
        for (int i=0; i < listOfFiles.length; i++){
            
            String currentfilenames = listOfFiles[i].getName();
            if (currentfilenames.endsWith(".csv")){
                numFile++;
            }
        }
                
        if (numFile == 0){
            JFrame error_frame = new JFrame();
            JOptionPane.showMessageDialog(error_frame, "No Data Entry files!", "Error!",JOptionPane.ERROR_MESSAGE);
        } else {

            if (new File(dataentry_path).exists()) {
                try {
                    merge_csv(dataentry_path);
                } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                try {
                    new File(dataentry_path).mkdir();
                    merge_csv(dataentry_path);
                } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            try {    
                cleancombinedfiles();
                
            } catch (IOException ex) {
                Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
            
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            JFrame frame = new JFrame("Adding a new account");
            String name = JOptionPane.showInputDialog(frame, "New Account(Format: FCM,Account Name):");

            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts.csv";
            JFrame error_frame = new JFrame();
            
            if (name != null && ("".equals(name))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (name == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {
                String[] fcm_account = name.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                BufferedReader br_acc = null;

                Object[][] data_acc = new Object[0][0];
                String line = "";
                String splitSign = ",";

                int p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));

                while (br_acc.readLine() != null) {
                    p++;
                }
                br_acc.close();
                data_acc = new Object[p - 1][];
                p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));
                line = br_acc.readLine();

                line = br_acc.readLine();
                while (line != null) {
                    data_acc[p] = new Object[line.split(splitSign).length];
                    for (int j = 0; j < data_acc[p].length; j++) {
                        data_acc[p][j] = line.split(splitSign)[j];
                    }
                    p++;
                    line = br_acc.readLine();
                }
                
                
                boolean existed = false;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = true;
                        }
                    
                }
                
                if (existed == false){
                    Object[][] new_data_acc = new Object[data_acc.length + 1][2];
                    
                    for (int m = 0; m < data_acc.length; m++){
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[m][n] = data_acc[m][n];
                        }
                    }
                    new_data_acc[data_acc.length][0] = fcm_name;
                    new_data_acc[data_acc.length][1] = account_name;

                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                    
                    writer.close();
                } else {
                    JOptionPane.showMessageDialog(error_frame, "Account name existed!", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        
        try {           
            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts.csv";
            
            JFrame error_frame = new JFrame();

            BufferedReader br_acc = null;

            Object[][] data_acc = new Object[0][0];
            String line = "";
            String splitSign = ",";

            int p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));

            while (br_acc.readLine() != null) {
                p++;
            }
            br_acc.close();
            data_acc = new Object[p - 1][];
            p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));
            line = br_acc.readLine();

            line = br_acc.readLine();
            while (line != null) {
                data_acc[p] = new Object[line.split(splitSign).length];
                 for (int j = 0; j < data_acc[p].length; j++) {
                    data_acc[p][j] = line.split(splitSign)[j];
                }
                p++;
                line = br_acc.readLine();
            }
            
            ArrayList<String> current_accounts = new ArrayList<String>();
            for (int m = 0; m < data_acc.length; m++){
                String account_info = (String) data_acc[m][0];
                account_info = account_info + "," + (String) data_acc[m][1];
                current_accounts.add(account_info);
            }
            Object[] current_account = current_accounts.toArray(new Object[current_accounts.size()]);
            
            String nametodelete = (String) JOptionPane.showInputDialog(null, "Account to Delete:", "Delete an account", JOptionPane.QUESTION_MESSAGE, null, current_account, current_account[0]); 

            if (nametodelete != null && ("".equals(nametodelete))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (nametodelete == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {       
                String[] fcm_account = nametodelete.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                int existed = 0;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = m;
                        }
                    
                }
                if (existed != 0){
                    Object[][] new_data_acc = new Object[data_acc.length - 1][2];
                    int new_m = 0;
                    loops:for (int m = 0; m < data_acc.length; m++){

                        if (m == existed && existed != data_acc.length - 1){
                            m++;
                        } 

                        
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[new_m][n] = data_acc[m][n];
                        }
                        
                        new_m ++;
                        
                        if(new_m == data_acc.length - 1){
                            break loops;
                        }
                    }
                
                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                
                writer.close();
            

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
        
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        String account_name_direc = System.getProperty("user.home") + "/carbide/accounts/accounts.csv";
        account_view account = new account_view(account_name_direc);
        account.setTitle("Accounts");
        account.setVisible(true);
        account.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        allocation_view allocation_weights = new allocation_view();
        allocation_weights.setTitle("Allocation Weight");
        allocation_weights.setVisible(true);
        allocation_weights.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
        
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        try {
            JFrame frame = new JFrame("Adding a new hedge account");
            String name = JOptionPane.showInputDialog(frame, "New Hedge Account(Format: FCM,Account Name):");

            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts_hedge.csv";
            JFrame error_frame = new JFrame();
            
            if (name != null && ("".equals(name))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (name == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {

                String[] fcm_account = name.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                BufferedReader br_acc = null;

                Object[][] data_acc = new Object[0][0];
                String line = "";
                String splitSign = ",";

                int p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));

                while (br_acc.readLine() != null) {
                    p++;
                }
                br_acc.close();
                data_acc = new Object[p - 1][];
                p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));
                line = br_acc.readLine();

                line = br_acc.readLine();
                while (line != null) {
                    data_acc[p] = new Object[line.split(splitSign).length];
                    for (int j = 0; j < data_acc[p].length; j++) {
                        data_acc[p][j] = line.split(splitSign)[j];
                    }
                    p++;
                    line = br_acc.readLine();
                }
                
                
                boolean existed = false;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = true;
                        }
                }
                
                if (existed == false){
                    Object[][] new_data_acc = new Object[data_acc.length + 1][2];
                    
                    for (int m = 0; m < data_acc.length; m++){
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[m][n] = data_acc[m][n];
                        }
                    }
                    new_data_acc[data_acc.length][0] = fcm_name;
                    new_data_acc[data_acc.length][1] = account_name;

                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                    
                    writer.close();
                } else {
                    JOptionPane.showMessageDialog(error_frame, "Account name existed!", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        
        String account_name_direc = System.getProperty("user.home") + "/carbide/accounts/accounts_hedge.csv";
        account_view account = new account_view(account_name_direc);
        account.setTitle("Hedge Accounts");
        account.setVisible(true);
        account.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        try {           
            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts_hedge.csv";
            
            JFrame error_frame = new JFrame();

            BufferedReader br_acc = null;

            Object[][] data_acc = new Object[0][0];
            String line = "";
            String splitSign = ",";

            int p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));

            while (br_acc.readLine() != null) {
                p++;
            }
            br_acc.close();
            data_acc = new Object[p - 1][];
            p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));
            line = br_acc.readLine();

            line = br_acc.readLine();
            while (line != null) {
                data_acc[p] = new Object[line.split(splitSign).length];
                 for (int j = 0; j < data_acc[p].length; j++) {
                    data_acc[p][j] = line.split(splitSign)[j];
                }
                p++;
                line = br_acc.readLine();
            }
            
            ArrayList<String> current_accounts = new ArrayList<String>();
            for (int m = 0; m < data_acc.length; m++){
                String account_info = (String) data_acc[m][0];
                account_info = account_info + "," + (String) data_acc[m][1];
                current_accounts.add(account_info);
            }
            Object[] current_account = current_accounts.toArray(new Object[current_accounts.size()]);
            
            String nametodelete = (String) JOptionPane.showInputDialog(null, "Hedge Account to Delete:", "Delete a hedge account", JOptionPane.QUESTION_MESSAGE, null, current_account, current_account[0]); 

            if (nametodelete != null && ("".equals(nametodelete))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (nametodelete == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {       
                String[] fcm_account = nametodelete.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                int existed = 0;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = m;
                        }
                    
                }
                if (existed != 0){
                    Object[][] new_data_acc = new Object[data_acc.length - 1][2];
                    int new_m = 0;
                    loops:for (int m = 0; m < data_acc.length; m++){

                        if (m == existed && existed != data_acc.length - 1){
                            m++;
                        } 

                        
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[new_m][n] = data_acc[m][n];
                        }
                        
                        new_m ++;
                        
                        if(new_m == data_acc.length - 1){
                            break loops;
                        }
                    }
                
                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                
                

                writer.close();
            

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        allocation_view_hedge allocation_weights = new allocation_view_hedge();
        allocation_weights.setTitle("Hedge Accounht Allocation Weight");
        allocation_weights.setVisible(true);
        allocation_weights.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        String homedirec = System.getProperty("user.home");
        String backup_path = homedirec + "/carbide/Back_ups";
        String primary_dataentry_path = homedirec + "/carbide/Data_Entry";
        String primary_combined_path = homedirec + "/carbide/Combined_Data_Entry";
                
        // get the files in Data_Entry
        File folder = new File(primary_dataentry_path);
        File[] listOfFiles = folder.listFiles();
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String current_date = dateFormat.format(date);
        current_date = current_date.substring(0,current_date.length()-2);
        current_date = current_date + "01";
        
        if (!(new File(backup_path).exists())) {
            new File(backup_path).mkdir();
        }
              
        for (int i = 0; i < listOfFiles.length; i++) {
            File current_file = listOfFiles[i];
            String current_file_name = listOfFiles[i].getName();
            
            if (current_file_name.length() >= 10){
                try {
                    String current_file_date = current_file_name.substring(0, 10);
                    Date date_current_file_date = dateFormat.parse(current_file_date);
                    Date date_current_date = dateFormat.parse(current_date);

                    if (date_current_file_date.before(date_current_date)){
//                        String backup_filename = backup_path + "/" + current_file_name;
//                        File backup_file_path = new File(backup_filename);

                        current_file.delete();
  
                    }

                } catch (ParseException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        
        // backup combined file
        File folder2 = new File(primary_combined_path);
        File[] listOfFiles2 = folder2.listFiles();
        
        for (int j = 0; j < listOfFiles2.length; j++) {
            
            File current_file2 = listOfFiles2[j];
            String current_file_name2 = listOfFiles2[j].getName();
            
            if (current_file_name2.endsWith("-combined.csv")){
                
                try {
                    String current_file_date2 = current_file_name2.substring(0, 10);
                    Date date_current_file_date2 = dateFormat.parse(current_file_date2);
                    Date date_current_date = dateFormat.parse(current_date);
                    
                    if (date_current_file_date2.before(date_current_date)){
                        String backup_filename = backup_path + "/" + current_file_name2;
                        File backup_file_path = new File(backup_filename);

                        current_file2.renameTo(backup_file_path);

                    }
                } catch (ParseException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                

            }

        }

        
        
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        
        String account_name_direc = System.getProperty("user.home") + "/carbide/accounts/accounts_macro.csv";
        account_view account = new account_view(account_name_direc);
        account.setTitle("Macro Accounts");
        account.setVisible(true);
        account.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        
        try {           
            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts_macro.csv";
            
            JFrame error_frame = new JFrame();

            BufferedReader br_acc = null;

            Object[][] data_acc = new Object[0][0];
            String line = "";
            String splitSign = ",";

            int p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));

            while (br_acc.readLine() != null) {
                p++;
            }
            br_acc.close();
            data_acc = new Object[p - 1][];
            p = 0;
            br_acc = new BufferedReader(new FileReader(account_name_direc));
            line = br_acc.readLine();

            line = br_acc.readLine();
            while (line != null) {
                data_acc[p] = new Object[line.split(splitSign).length];
                 for (int j = 0; j < data_acc[p].length; j++) {
                    data_acc[p][j] = line.split(splitSign)[j];
                }
                p++;
                line = br_acc.readLine();
            }
            
            ArrayList<String> current_accounts = new ArrayList<String>();
            for (int m = 0; m < data_acc.length; m++){
                String account_info = (String) data_acc[m][0];
                account_info = account_info + "," + (String) data_acc[m][1];
                current_accounts.add(account_info);
            }
            Object[] current_account = current_accounts.toArray(new Object[current_accounts.size()]);
            
            String nametodelete = (String) JOptionPane.showInputDialog(null, "Macro Account to Delete:", "Delete a macro account", JOptionPane.QUESTION_MESSAGE, null, current_account, current_account[0]); 

            if (nametodelete != null && ("".equals(nametodelete))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (nametodelete == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {       
                String[] fcm_account = nametodelete.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                int existed = 0;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = m;
                        }
                    
                }
                if (existed != 0){
                    Object[][] new_data_acc = new Object[data_acc.length - 1][2];
                    int new_m = 0;
                    loops:for (int m = 0; m < data_acc.length; m++){

                        if (m == existed && existed != data_acc.length - 1){
                            m++;
                        } 

                        
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[new_m][n] = data_acc[m][n];
                        }
                        
                        new_m ++;
                        
                        if(new_m == data_acc.length - 1){
                            break loops;
                        }
                    }
                
                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                
                

                writer.close();
            

                }
            }
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        
        try {
            JFrame frame = new JFrame("Adding a new macro account");
            String name = JOptionPane.showInputDialog(frame, "New Macro Account(Format: FCM,Account Name):");

            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts_macro.csv";
            JFrame error_frame = new JFrame();
            
            if (name != null && ("".equals(name))) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else if (name == null) {
                JOptionPane.getRootFrame().dispose();   
            } else {

                String[] fcm_account = name.split(",");
                String fcm_name = fcm_account[0];
                String account_name = fcm_account[1];
                BufferedReader br_acc = null;

                Object[][] data_acc = new Object[0][0];
                String line = "";
                String splitSign = ",";

                int p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));

                while (br_acc.readLine() != null) {
                    p++;
                }
                br_acc.close();
                data_acc = new Object[p - 1][];
                p = 0;
                br_acc = new BufferedReader(new FileReader(account_name_direc));
                line = br_acc.readLine();

                line = br_acc.readLine();
                while (line != null) {
                    data_acc[p] = new Object[line.split(splitSign).length];
                    for (int j = 0; j < data_acc[p].length; j++) {
                        data_acc[p][j] = line.split(splitSign)[j];
                    }
                    p++;
                    line = br_acc.readLine();
                }
                
                
                boolean existed = false;
                for (int m = 0; m < data_acc.length; m++){
                        if (data_acc[m][0].equals(fcm_name) && data_acc[m][1].equals(account_name)){
                            existed = true;
                        }
                }
                
                if (existed == false){
                    Object[][] new_data_acc = new Object[data_acc.length + 1][2];
                    
                    for (int m = 0; m < data_acc.length; m++){
                        for (int n = 0; n < data_acc[m].length; n++){
                            new_data_acc[m][n] = data_acc[m][n];
                        }
                    }
                    new_data_acc[data_acc.length][0] = fcm_name;
                    new_data_acc[data_acc.length][1] = account_name;

                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);
                    writer.write("FCM,Account Names" + System.lineSeparator());
                    
                    for (int m = 0; m < new_data_acc.length; m++){
                        for (int n = 0; n < new_data_acc[m].length; n++){
                            String to_write = null;
                            if ( n == new_data_acc[m].length - 1){
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write);
                            } else {
                                to_write = (String) new_data_acc[m][n];
                                writer.write(to_write + ",");
                            }
                        }
                        
                        if ( m != new_data_acc.length){
                                writer.write(System.lineSeparator());
                        }
                    }
                    
                    writer.close();
                } else {
                    JOptionPane.showMessageDialog(error_frame, "Account name existed!", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        allocation_view_macro allocation_weights = new allocation_view_macro();
        allocation_weights.setTitle("Macro Accounht Allocation Weight");
        allocation_weights.setVisible(true);
        allocation_weights.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem16ActionPerformed
    
    public void merge_csv(String combined_entry) throws FileNotFoundException, IOException{
        
        String headers = null;
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Data_Entry";
        File folder = new File(dataentry_path);
        File[] listOfFiles = folder.listFiles();
        ArrayList<File> files = new ArrayList<File>();
        
        for (int i = 0; i < listOfFiles.length; i++){

            if (listOfFiles[i].getName().contains(".csv")) {
                files.add(listOfFiles[i]);
            }

        }
        
        if (files.size() != 0){
            File folder_to_delete = new File(combined_entry);
            File[] listOfFiles_to_delete = folder_to_delete.listFiles();

            for (int i = 0; i < listOfFiles_to_delete.length; i++){

                if (listOfFiles_to_delete[i].getName().contains(".csv")) {
                    System.out.println(listOfFiles_to_delete[i]);
                    listOfFiles_to_delete[i].delete();
                }

            }

            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH_mm_ss");
            Date date = new Date();
            String csvFinal = combined_entry + "/" +  dateFormat.format(date) +"-combined.csv";

            File fileOutput = new File(csvFinal);
            if (fileOutput.exists()) {
                fileOutput.delete();
            }
            try {
                fileOutput.createNewFile();
            } catch (IOException e) {
            }

            Iterator<File> iterFiles = files.iterator();
            BufferedWriter fileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFinal), "UTF-8"));

            String firstFile = null;
            for (int i = 0; i < listOfFiles.length; i++) {

                if (listOfFiles[i].getName().contains(".csv")) {
                    firstFile = listOfFiles[i].getPath();
                    break;
                }
            }

            Scanner scanner = new Scanner(new File(firstFile));

            if (scanner.hasNextLine()) {
                headers = scanner.nextLine();
            }

            scanner.close();

            fileWriter.write(headers);
            fileWriter.newLine();

            BufferedReader fileReader;

            while (iterFiles.hasNext()) {

                String line;
                String[] firstLine;

                File nextFile = iterFiles.next();
                fileReader = new BufferedReader(new FileReader(nextFile));

                if ((line = fileReader.readLine()) != null)
                    firstLine = line.split(";");

                while ((line = fileReader.readLine()) != null) {
                    fileWriter.write(line);
                    fileWriter.newLine();
                }
                fileReader.close();
            }

            fileWriter.close();
        } 
    }
    
    public void aggregatemerge_csv(String combined_entry) throws FileNotFoundException, IOException{
        
        String headers = null;
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Combined_Data_Entry/separate_aggregated_accounts";
        File folder = new File(dataentry_path);
        File[] listOfFiles = folder.listFiles();
        ArrayList<File> files = new ArrayList<File>();
        
        for (int i = 0; i < listOfFiles.length; i++){
            
            if (listOfFiles[i].getName().contains(".csv")) {
                files.add(listOfFiles[i]);
            }
    
        }
        
        File folder_to_delete = new File(combined_entry);
        File[] listOfFiles_to_delete = folder_to_delete.listFiles();
        
        for (int i = 0; i < listOfFiles_to_delete.length; i++){
            
            if (listOfFiles_to_delete[i].getName().contains(".csv")) {
                listOfFiles_to_delete[i].delete();
            }
    
        }
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH_mm_ss");
        Date date = new Date();
        String csvFinal = combined_entry + "/" +  dateFormat.format(date) +"-aggregated-combined.csv";
        
        File fileOutput = new File(csvFinal);
        if (fileOutput.exists()) {
            fileOutput.delete();
        }
        try {
            fileOutput.createNewFile();
        } catch (IOException e) {
        }
        
        Iterator<File> iterFiles = files.iterator();
        BufferedWriter fileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFinal), "UTF-8"));
        
        String firstFile = null;
        for (int i = 0; i < listOfFiles.length; i++) {
 
            if (listOfFiles[i].getName().contains(".csv")) {
                firstFile = listOfFiles[i].getPath();
                break;
            }
        }
        
        Scanner scanner = new Scanner(new File(firstFile));
        
        if (scanner.hasNextLine()) {
            headers = scanner.nextLine();
        }
        
        scanner.close();
        
        fileWriter.write(headers);
        fileWriter.newLine();
        
        BufferedReader fileReader;
        
        while (iterFiles.hasNext()) {

            String line;
            String[] firstLine;

            File nextFile = iterFiles.next();
            fileReader = new BufferedReader(new FileReader(nextFile));

            if ((line = fileReader.readLine()) != null)
                firstLine = line.split(";");

            while ((line = fileReader.readLine()) != null) {
                fileWriter.write(line);
                fileWriter.newLine();
            }
            fileReader.close();
        }

        fileWriter.close();
    }

    public void cleancombinedfiles() throws IOException {
        try {
            String homedirec = System.getProperty("user.home");
            String dataentry_path = homedirec + "/carbide/Combined_Data_Entry";
            
            File folder = new File(dataentry_path);
            String[] fileList = folder.list();
            String combined_file = dataentry_path;
            for(String name:fileList){
                if (name.contains(".csv")){
                    combined_file += "/" + name;

                }
            }
            
            //function to remove 0s in combined files
            
            BufferedReader br = null;
            
            String[] columnNames = new String[0];
            Object[][] data = new Object[0][0];
            String line = "";
            String splitSign = ",";
            
            int i = 0;
            br = new BufferedReader(new FileReader(combined_file));
            
            while (br.readLine() != null) {
                i++;
            }
            br.close();
            data = new Object[i - 1][];
            i = 0;
            br = new BufferedReader(new FileReader(combined_file));
            line = br.readLine();
            columnNames = line.split(splitSign);
            
            line = br.readLine();
            while (line != null) {
                data[i] = new Object[line.split(splitSign).length];
                
                for (int j = 0; j < data[i].length; j++) {
                    data[i][j] = line.split(splitSign)[j];
                }
                i++;
                line = br.readLine();
            }
            br.close();
            
                        
            File file_to_delete = new File(combined_file);
            file_to_delete.delete();


            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH_mm_ss");
            Date date = new Date();
            
            String cleaned_combined_file = dataentry_path + "/" +  dateFormat.format(date) +"-combined.csv";
            
            Writer writer = null;


            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(cleaned_combined_file), "utf-8"));

            StringBuffer bufferHeader = new StringBuffer();
            
            for (int j = 0; j < columnNames.length; j++) {
                bufferHeader.append(columnNames[j]);
                if (j!=columnNames.length-1) bufferHeader.append(",");
            }
            writer.write(bufferHeader.toString() + "\r\n");
            
            for (int m = 0; m < data.length; m++){
                StringBuffer buffer = new StringBuffer();
                if (Float.valueOf((String) data[m][2])!= 0.0){
                    for (int x = 0; x < data[m].length; x++){
                        buffer.append(data[m][x]);
                        if (x!=data[m].length-1) buffer.append(",");
                    }
                    writer.write(buffer.toString() + "\r\n");
                }
            }
            writer.close();
            

            File folder3 = new File(dataentry_path);
            String[] fileList3 = folder3.list();
            String new_combined_file = dataentry_path;
            for(String name:fileList3){
                if (name.contains(".csv")){
                    new_combined_file += "/" + name;
                }
            }
            
            String line3 ="";
            BufferedReader br3 = null;
            Object[][] data3 = new Object[0][0];
            
            int u = 0;
            br3 = new BufferedReader(new FileReader(new_combined_file));
            
            while (br3.readLine() != null) {
                u++;
            }
            br3.close();
            data3 = new Object[u - 1][];
            u = 0;
            br3 = new BufferedReader(new FileReader(new_combined_file));
            line3 = br3.readLine();
            
            line3 = br3.readLine();
            while (line3 != null) {
                data3[u] = new Object[line3.split(splitSign).length];
                
                for (int j = 0; j < data3[u].length; j++) {
                    data3[u][j] = line3.split(splitSign)[j];
                }
                u++;
                line3 = br3.readLine();
            }
            
            br3.close();
            
            
            ///aggregation codes
            String all_aggregated_dir = dataentry_path + "/all_aggregated_accounts";
            File all_aggregated_folder = new File(all_aggregated_dir);
            if (!all_aggregated_folder.exists()) {
                        new File(all_aggregated_dir).mkdir();
            } else {
                String[] aggregate_fileList = all_aggregated_folder.list();
                String previous_aggreate_files = "";
                for(String name:aggregate_fileList){
                    if (name.contains(".csv")){
                        all_aggregated_dir = dataentry_path + "/all_aggregated_accounts";
                        previous_aggreate_files = all_aggregated_dir + "/" + name;
                        File agg_file_to_delete = new File(previous_aggreate_files);
                        agg_file_to_delete.delete();
                    }
                }
            }
            
            DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
            Date date2 = new Date();
            
            String all_aggregated = all_aggregated_dir + "/" + "ALL-" + dateFormat2.format(date2) +"-aggregated.csv";
            
            Writer writer2 = null;
            writer2 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(all_aggregated), "utf-8"));

            StringBuffer bufferHeader2 = new StringBuffer();
                        
            
            bufferHeader2.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price");
            writer2.write(bufferHeader2.toString() + "\r\n");
            DecimalFormat df = new DecimalFormat("#.####");
            df.setRoundingMode(RoundingMode.CEILING);
            
            for (int m = 0; m < data3.length; m++){
                float finalamount = Float.valueOf((String) data3[m][2]);
                float averaged_price = Float.valueOf((String) data3[m][4]) * finalamount;
                StringBuffer buffer2 = new StringBuffer();
                float prev_strike = Float.valueOf((String) data3[m][3]);
                
                if ( m != 0){
                    boolean existed = false;
                    
                    for (int q = m - 1; q > -1; q--){
                        
                        float curr_strike = Float.valueOf((String) data3[q][3]);
                        boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                        
                        boolean matching = (data3[m][1].equals(data3[q][1]) && compare && data3[m][5].equals(data3[q][5]) && data3[m][6].equals(data3[q][6]) && data3[m][7].equals(data3[q][7]));               
                        
                        if(matching){
                            existed = true;
                        }
                    
                    }
                    
                    if (!existed){
                        for (int p = m + 1; p < data3.length; p++){
                            float curr_strike = Float.valueOf((String) data3[p][3]);
                            boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                            
                            boolean matching = (data3[m][1].equals(data3[p][1]) && compare && data3[m][5].equals(data3[p][5]) && data3[m][6].equals(data3[p][6]) && data3[m][7].equals(data3[p][7]));
                            if (matching){
                                finalamount =  finalamount + Float.valueOf((String) data3[p][2]);
                                averaged_price = averaged_price + Float.valueOf((String) data3[p][4]) * Float.valueOf((String) data3[p][2]);

                            }
                        }
                        
                        if (Math.abs(finalamount - 0) > epsilon){
                            String to_append = dateFormat2.format(date2) + "," + data3[m][1] + "," + data3[m][3] + "," + data3[m][5] + "," + data3[m][6] + "," + data3[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount);
                            buffer2.append(to_append);
                            writer2.write(buffer2.toString() + "\r\n");
                        };
                    }
                    
                } else {
                    for (int p = 1; p < data3.length; p++){
                        
                        float curr_strike = Float.valueOf((String) data3[p][3]);
                        boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                            
                        boolean matching = (data3[m][1].equals(data3[p][1]) && compare && data3[m][5].equals(data3[p][5]) && data3[m][6].equals(data3[p][6]) && data3[m][7].equals(data3[p][7]));
                        
                        if (matching){
                            finalamount =  finalamount + Float.valueOf((String) data3[p][2]);
                            averaged_price = averaged_price + Float.valueOf((String) data3[p][4]) * Float.valueOf((String) data3[p][2]);
                        }
                    }
                    if (Math.abs(finalamount - 0) > epsilon){
                        String to_append = dateFormat2.format(date2) + "," + data3[m][1] + "," + data3[m][3] + "," + data3[m][5] + "," + data3[m][6] + "," + data3[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount);
                        buffer2.append(to_append);
                        writer2.write(buffer2.toString() + "\r\n");
                    }
                }
                
            }
            
            writer2.close();
            
            
//            create hedge and normal aggreated accounts
            String normal_all_aggregated_dir = all_aggregated_dir + "/normal_aggregated_accounts";
            String hedged_all_aggregated_dir = all_aggregated_dir + "/hedged_aggregated_accounts";
            String macro_all_aggregated_dir = all_aggregated_dir + "/macro_aggregated_accounts";

            File normal_all_aggregated_folder = new File(normal_all_aggregated_dir);
            if (!normal_all_aggregated_folder.exists()) {
                        new File(normal_all_aggregated_dir).mkdir();
            } else {
                String[] normal_all_aggregate_fileList = normal_all_aggregated_folder.list();
                String previous_normal_all_aggreate_files = "";
                for(String name:normal_all_aggregate_fileList){
                    if (name.contains(".csv")){
                        normal_all_aggregated_dir = all_aggregated_dir + "/normal_aggregated_accounts";
                        previous_normal_all_aggreate_files = normal_all_aggregated_dir + "/" + name;
                        File normal_all_agg_file_to_delete = new File(previous_normal_all_aggreate_files);
                        normal_all_agg_file_to_delete.delete();
                    }
                }
            }
            
            File hedged_all_aggregated_folder = new File(hedged_all_aggregated_dir);
            if (!hedged_all_aggregated_folder.exists()) {
                        new File(hedged_all_aggregated_dir).mkdir();
            } else {
                String[] hedged_all_aggregate_fileList = hedged_all_aggregated_folder.list();
                String previous_hedged_all_aggreate_files = "";
                for(String name:hedged_all_aggregate_fileList){
                    if (name.contains(".csv")){
                        hedged_all_aggregated_dir = all_aggregated_dir + "/hedged_aggregated_accounts";
                        previous_hedged_all_aggreate_files = hedged_all_aggregated_dir + "/" + name;
                        File hedged_all_agg_file_to_delete = new File(previous_hedged_all_aggreate_files);
                        hedged_all_agg_file_to_delete.delete();
                    }
                }
            }
            
            File macro_all_aggregated_folder = new File(macro_all_aggregated_dir);
            if (!macro_all_aggregated_folder.exists()) {
                        new File(macro_all_aggregated_dir).mkdir();
            } else {
                String[] macro_all_aggregate_fileList = macro_all_aggregated_folder.list();
                String previous_macro_all_aggreate_files = "";
                for(String name:macro_all_aggregate_fileList){
                    if (name.contains(".csv")){
                        macro_all_aggregated_dir = all_aggregated_dir + "/macro_aggregated_accounts";
                        previous_macro_all_aggreate_files = macro_all_aggregated_dir + "/" + name;
                        File macro_all_agg_file_to_delete = new File(previous_macro_all_aggreate_files);
                        macro_all_agg_file_to_delete.delete();
                    }
                }
            }
            
            
            String normal_all_aggregated = normal_all_aggregated_dir + "/" + "normal-" + dateFormat2.format(date2) +"-aggregated.csv";
            String hedged_all_aggregated = hedged_all_aggregated_dir + "/" + "hedged-" + dateFormat2.format(date2) +"-aggregated.csv";
            String macro_all_aggregated = macro_all_aggregated_dir + "/" + "macro-" + dateFormat2.format(date2) +"-aggregated.csv";

            Writer normal_writer = null;
            normal_writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(normal_all_aggregated), "utf-8"));

            StringBuffer normal_bufferHeader2 = new StringBuffer();
            
            normal_bufferHeader2.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price");
            normal_writer.write(normal_bufferHeader2.toString() + "\r\n");
            
            Writer hedged_writer = null;
            hedged_writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(hedged_all_aggregated), "utf-8"));

            StringBuffer hedged_bufferHeader2 = new StringBuffer();
            
            hedged_bufferHeader2.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price");
            hedged_writer.write(hedged_bufferHeader2.toString() + "\r\n");
            
            Writer macro_writer = null;
            macro_writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(macro_all_aggregated), "utf-8"));

            StringBuffer macro_bufferHeader2 = new StringBuffer();
            
            macro_bufferHeader2.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price");
            macro_writer.write(macro_bufferHeader2.toString() + "\r\n");
            
            
            //reading macro account information
            String macro_account_information = homedirec + "/carbide/accounts/accounts_macro.csv";
            
            BufferedReader macro_br = null;

            String[] macro_columnNames = new String[0];
            Object[][] macro_acc_data = new Object[0][0];
            String macro_line = "";

            int zz = 0;
            macro_br = new BufferedReader(new FileReader(macro_account_information));

            while (macro_br.readLine() != null) {
                zz++;
            }
            macro_br.close();
            
            macro_acc_data = new Object[zz - 1][];
            zz = 0;
            macro_br = new BufferedReader(new FileReader(macro_account_information));
            macro_line = macro_br.readLine();
            macro_columnNames = macro_line.split(splitSign);

            macro_line = macro_br.readLine();
                        
            while (macro_line != null) {
                macro_acc_data[zz] = new Object[macro_line.split(splitSign).length];
                for (int jj = 0; jj < macro_acc_data[zz].length; jj++) {
                    macro_acc_data[zz][jj] = macro_line.split(splitSign)[jj];
                }
                
                zz++;
                macro_line = macro_br.readLine();
            }
            macro_br.close();
            

            //reading hedging account information
            String hedged_account_information = homedirec + "/carbide/accounts/accounts_hedge.csv";
            
            BufferedReader hedged_br = null;

            String[] hedged_columnNames = new String[0];
            Object[][] hedged_acc_data = new Object[0][0];
            String hedged_line = "";

            int ii = 0;
            hedged_br = new BufferedReader(new FileReader(hedged_account_information));

            while (hedged_br.readLine() != null) {
                ii++;
            }
            hedged_br.close();
            
            hedged_acc_data = new Object[ii - 1][];
            ii = 0;
            hedged_br = new BufferedReader(new FileReader(hedged_account_information));
            hedged_line = hedged_br.readLine();
            hedged_columnNames = hedged_line.split(splitSign);

            hedged_line = hedged_br.readLine();
                        
            while (hedged_line != null) {
                hedged_acc_data[ii] = new Object[hedged_line.split(splitSign).length];
                for (int jj = 0; jj < hedged_acc_data[ii].length; jj++) {
                    hedged_acc_data[ii][jj] = hedged_line.split(splitSign)[jj];
                }
                
                ii++;
                hedged_line = hedged_br.readLine();
            }
            hedged_br.close();
            
            // reading absolute account information 
            String normal_account_information = homedirec + "/carbide/accounts/accounts.csv";
            
            BufferedReader normal_br = null;

            String[] normal_columnNames = new String[0];
            Object[][] normal_acc_data = new Object[0][0];
            String normal_line = "";

            int pp = 0;
            normal_br = new BufferedReader(new FileReader(normal_account_information));

            while (normal_br.readLine() != null) {
                pp++;
            }
            normal_br.close();
            
            normal_acc_data = new Object[pp - 1][];
            pp = 0;
            normal_br = new BufferedReader(new FileReader(normal_account_information));
            normal_line = normal_br.readLine();
            normal_columnNames = normal_line.split(splitSign);

            normal_line = normal_br.readLine();
                        
            while (normal_line != null) {
                normal_acc_data[pp] = new Object[normal_line.split(splitSign).length];
                for (int qq = 0; qq < normal_acc_data[pp].length; qq++) {
                    normal_acc_data[pp][qq] = normal_line.split(splitSign)[qq];
                }
                
                pp++;
                normal_line = normal_br.readLine();
            }
            normal_br.close();
            
            
//            for debugging
//            System.out.println(hedged_acc_data.length);
            
//            for (Object[] hedged_acc_data1 : hedged_acc_data) {
//                for (int j = 0; j < hedged_acc_data1.length; j++) {
//                    System.out.println(hedged_acc_data1[j]);
//                }
//            }
            


            Object hedged_data = sHedgeobj(data3, hedged_acc_data);
            
            if (hedged_data != null){
                aggregation((Object[][]) hedged_data, hedged_all_aggregated);
            }
            
            Object normal_data = sNormalobj(data3, normal_acc_data);
            
            if (normal_data != null){
                aggregation((Object[][]) normal_data, normal_all_aggregated);
            }
            
            Object macro_data = sNormalobj(data3, macro_acc_data);
            
            if (macro_data != null){
                aggregation((Object[][]) macro_data, macro_all_aggregated);
            }
            
            
            
            normal_writer.close();
            hedged_writer.close();
            macro_writer.close();

            
            ///separate_aggregation
            String separate_aggregated_dir = dataentry_path + "/separate_aggregated_accounts";
            File separate_aggregated_folder = new File(separate_aggregated_dir);
            if (!separate_aggregated_folder.exists()) {
                        new File(separate_aggregated_dir).mkdir();
            } else {
                //code to delete previous separate aggregated code
                String[] separate_aggregate_fileList = separate_aggregated_folder.list();
                for(String name:separate_aggregate_fileList){
                    if (name.contains(".csv")){
                        separate_aggregated_dir = dataentry_path + "/separate_aggregated_accounts";
                        separate_aggregated_dir += "/" + name;
                        File sep_agg_file_to_delete = new File(separate_aggregated_dir);
                        sep_agg_file_to_delete.delete();
                    }
                }   
            }
            
            
            ArrayList<String> distinct_account_names = new ArrayList<String>();
            
            for (int x = 0; x < data3.length; x++){
                
                if (x == 0){
                    distinct_account_names.add((String) data3[x][9]);
                } else {
                    boolean existed = false;
                    
                    for (int y = 0; y < distinct_account_names.size(); y++){
                        if (data3[x][9].equals(distinct_account_names.get(y))){
                            existed = true;
                        }
                    }
                    if (!existed){
                        distinct_account_names.add((String) data3[x][9]);
                    }
                }
            }
            
            Writer writer3 = null;
            
            for (int p = 0; p < distinct_account_names.size(); p++){
                
                separate_aggregated_dir = dataentry_path + "/separate_aggregated_accounts";;
                separate_aggregated_dir = separate_aggregated_dir + "/" + distinct_account_names.get(p) + "-" + dateFormat2.format(date2) +"-aggregated.csv";
                writer3 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(separate_aggregated_dir), "utf-8"));
                
                StringBuffer bufferHeader3 = new StringBuffer();
                bufferHeader3.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price,Account");
                writer3.write(bufferHeader3.toString() + "\r\n");
                
                String current_account_name = distinct_account_names.get(p);
                
                for (int m = 0; m < data3.length; m++){
                    
                    if (data3[m][9].equals(current_account_name)) {
                        
                        float finalamount = Float.valueOf((String) data3[m][2]);
                        float averaged_price = Float.valueOf((String) data3[m][4]) * finalamount;
                        StringBuffer buffer3 = new StringBuffer();
                        float prev_strike = Float.valueOf((String) data3[m][3]);


                        if ( m != 0){
                            boolean existed = false;
                            
                            for (int q = m - 1; q > -1; q--){
                                float curr_strike = Float.valueOf((String) data3[q][3]);
                                boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                                
                                boolean matching = (data3[m][1].equals(data3[q][1]) && compare && data3[m][5].equals(data3[q][5]) && data3[m][6].equals(data3[q][6]) && data3[m][7].equals(data3[q][7]) && data3[m][9].equals(data3[q][9]));
                                if(matching){
                                    existed = true;
                                }
                            }
                            
                            if (!existed) {     
                                for (int s = m + 1; s < data3.length; s++){
                                    float curr_strike = Float.valueOf((String) data3[s][3]);
                                    boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                                
                                    boolean matching = (data3[m][1].equals(data3[s][1]) && compare && data3[m][5].equals(data3[s][5]) && data3[m][6].equals(data3[s][6]) && data3[m][7].equals(data3[s][7]) && data3[m][9].equals(data3[s][9]));
                                    if (matching){
                                        finalamount =  finalamount + Float.valueOf((String) data3[s][2]);
                                        averaged_price = averaged_price + Float.valueOf((String) data3[s][4]) * Float.valueOf((String) data3[s][2]);
                                    }
                                }
                                
                                if (Math.abs(finalamount - 0) > epsilon){
                                    String to_append = dateFormat2.format(date2) + "," + data3[m][1] + "," + data3[m][3] + "," + data3[m][5] + "," + data3[m][6] + "," + data3[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount) + "," + data3[m][9];
                                    buffer3.append(to_append);
                                    writer3.write(buffer3.toString() + "\r\n");
                                }
                            }
                        } else {
                            for (int s = 1; s < data3.length; s++){
                                float curr_strike = Float.valueOf((String) data3[s][3]);
                                boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);
                                
                                boolean matching = (data3[m][1].equals(data3[s][1]) && compare && data3[m][5].equals(data3[s][5]) && data3[m][6].equals(data3[s][6]) && data3[m][7].equals(data3[s][7]) && data3[m][9].equals(data3[s][9]));

                                if (matching){
                                    finalamount =  finalamount + Float.valueOf((String) data3[s][2]);
                                    averaged_price = averaged_price + Float.valueOf((String) data3[s][4]) * Float.valueOf((String) data3[s][2]);
                                }
                            }
                            if (Math.abs(finalamount - 0) > epsilon){
                                String to_append = dateFormat2.format(date2) + "," + data3[m][1] + "," + data3[m][3] + "," + data3[m][5] + "," + data3[m][6] + "," + data3[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount) + "," + data3[m][9];
                                buffer3.append(to_append);
                                writer3.write(buffer3.toString() + "\r\n");
                            }
                        }
                    }
                }
                writer3.close();
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public static void aggregation(Object[][] data, String file_dirc) throws IOException{
        
        Writer writer2 = null;
        writer2 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file_dirc), "utf-8"));

        StringBuffer bufferHeader2 = new StringBuffer();
                        
            
        bufferHeader2.append("Date,Symbol,Strike,Type,Expiry,Month,Amount,Price");
        writer2.write(bufferHeader2.toString() + "\r\n");
        
        float epsilon = (float) 0.00001;
        DecimalFormat df = new DecimalFormat("#.####");
        df.setRoundingMode(RoundingMode.CEILING);
        
        DateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
        Date date2 = new Date();
        
        for (int m = 0; m < data.length; m++){
            
            float finalamount = Float.valueOf((String) data[m][2]);
            float averaged_price = Float.valueOf((String) data[m][4]) * finalamount;
            StringBuffer buffer2 = new StringBuffer();
            float prev_strike = Float.valueOf((String) data[m][3]);
                
            if ( m != 0){
                boolean existed = false;

                for (int q = m - 1; q > -1; q--){

                    float curr_strike = Float.valueOf((String) data[q][3]);
                    boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);

                    boolean matching = (data[m][1].equals(data[q][1]) && compare && data[m][5].equals(data[q][5]) && data[m][6].equals(data[q][6]) && data[m][7].equals(data[q][7]));               

                    if(matching){
                        existed = true;
                    }

                }

                if (!existed){
                    for (int p = m + 1; p < data.length; p++){
                        float curr_strike = Float.valueOf((String) data[p][3]);
                        boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);

                        boolean matching = (data[m][1].equals(data[p][1]) && compare && data[m][5].equals(data[p][5]) && data[m][6].equals(data[p][6]) && data[m][7].equals(data[p][7]));
                        if (matching){
                            finalamount =  finalamount + Float.valueOf((String) data[p][2]);
                            averaged_price = averaged_price + Float.valueOf((String) data[p][4]) * Float.valueOf((String) data[p][2]);

                        }
                    }

                    if (Math.abs(finalamount - 0) > epsilon){
                        String to_append = dateFormat2.format(date2) + "," + data[m][1] + "," + data[m][3] + "," + data[m][5] + "," + data[m][6] + "," + data[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount);
                        buffer2.append(to_append);
                        writer2.write(buffer2.toString() + "\r\n");
                    };
                }

            } else {
                
                for (int p = 1; p < data.length; p++){

                    float curr_strike = Float.valueOf((String) data[p][3]);
                    boolean compare = (Math.abs(curr_strike - prev_strike) < epsilon);

                    boolean matching = (data[m][1].equals(data[p][1]) && compare && data[m][5].equals(data[p][5]) && data[m][6].equals(data[p][6]) && data[m][7].equals(data[p][7]));

                    if (matching){
                        finalamount =  finalamount + Float.valueOf((String) data[p][2]);
                        averaged_price = averaged_price + Float.valueOf((String) data[p][4]) * Float.valueOf((String) data[p][2]);
                    }
                }

                if (Math.abs(finalamount - 0) > epsilon){
                    String to_append = dateFormat2.format(date2) + "," + data[m][1] + "," + data[m][3] + "," + data[m][5] + "," + data[m][6] + "," + data[m][7] + "," + Float.toString(finalamount) + "," + df.format(averaged_price/finalamount);
                    buffer2.append(to_append);
                    writer2.write(buffer2.toString() + "\r\n");
                }
            }

        }
        
        writer2.close();
        
    }
    
    public static Object[][] sHedgeobj(Object[][] data, Object[][] hedge_acc) {
        int num = 0;
        String spliting = "-";
        
        for (int i=0; i < data.length; i++){
            String current_account = data[i][9].toString();
            
            for (int p=0; p < hedge_acc.length; p++){
                String curr_first = hedge_acc[p][0].toString();
                String curr_sec = hedge_acc[p][1].toString();
                
                String first = current_account.split(spliting)[0];
                String second = current_account.split(spliting)[1];

                if ((first.equals(curr_first)) && (second.equals(curr_sec))){
                    num ++;
                }
            }
        }
            
        if (num == 0){
            return null;
        } else {
            
            Object[][] hedged_data = new Object[num][data[0].length];
            
            int num1 = 0;
            
            for (int i=0; i < data.length; i++){
                String current_account = data[i][9].toString();
            
                for (int p=0; p < hedge_acc.length; p++){
                    String curr_first = hedge_acc[p][0].toString();
                    String curr_sec = hedge_acc[p][1].toString();

                    String first = current_account.split(spliting)[0];
                    String second = current_account.split(spliting)[1];

                    if (first.equals(curr_first) && second.equals(curr_sec)){                    
                        for (int j=0; j < data[i].length; j++){
                            hedged_data[num1][j] = data[i][j];
                        }
                        num1++;
                    }
                }
            }
        
            return hedged_data;
        }
       
    }
    
    public static Object sNormalobj(Object[][] data, Object[][] hedge_acc) {
        int num = 0;
        String spliting = "-";
        
        for (int i=0; i < data.length; i++){
            String current_account = data[i][9].toString();
            
            for (int p=0; p < hedge_acc.length; p++){
                String curr_first = hedge_acc[p][0].toString();
                String curr_sec = hedge_acc[p][1].toString();
                
                String first = current_account.split(spliting)[0];
                String second = current_account.split(spliting)[1];
                
                if (((first.equals(curr_first)) && (second.equals(curr_sec)))){
                    num ++;
                }
            }
        }

        if (num == 0){
            return null;
        } else {
            Object[][] hedged_data = new Object[num][10];
            
            int num1 = 0;
            
            for (int i=0; i < data.length; i++){
                String current_account = data[i][9].toString();
            
                for (int p=0; p < hedge_acc.length; p++){
                    String curr_first = hedge_acc[p][0].toString();
                    String curr_sec = hedge_acc[p][1].toString();

                    String first = current_account.split(spliting)[0];
                    String second = current_account.split(spliting)[1];
                    

                    if (((first.equals(curr_first)) && (second.equals(curr_sec)))){
                        for (int j=0; j < data[i].length; j++){
                            
                            hedged_data[num1][j] = data[i][j];
                        
                        }
                        
                        num1++;
                    
                    }
                }
            }
        
            return hedged_data;
        }

    }
    
    public static void deleteFolder(File folder) {
        File[] files = folder.listFiles();
        if(files!=null) { //some JVMs return null for empty dirs
            for(File f: files) {
                if(f.isDirectory()) {
                    deleteFolder(f);
                } else {
                    f.delete();
                }
            }
        }
        folder.delete();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
