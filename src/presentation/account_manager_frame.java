/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.bouncycastle.util.test.Test;

/**
 *
 * @author ren
 */
public class account_manager_frame extends javax.swing.JFrame {

    /**
     * Creates new form account_manager_frame
     */
    public account_manager_frame() {
        initComponents();
        
        String homedirec = System.getProperty("user.home");
        String carbide_dir = homedirec + "/carbide";
        
        if (!new File(carbide_dir).exists()) {
            new File(carbide_dir).mkdir();
        }
        
        System.out.println(System.getProperty("os.name"));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        jMenuItem4.setText("jMenuItem4");

        jMenuItem5.setText("jMenuItem5");

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Data Entry");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Reports");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Aggregate Positions");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/carbide.jpg"))); // NOI18N

        jMenu1.setText("File");

        jMenuItem1.setText("Open PDF");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("View CSV");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Accounts");

        jMenuItem8.setText("View Accounts");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem6.setText("Add a New Account");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Delete a Account");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);
        jMenu2.add(jSeparator1);

        jMenuItem3.setText("Allocation Weights");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("BS Model");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        JFileChooser filechooser = new javax.swing.JFileChooser();
        
        int returnVal = filechooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            String filename = filechooser.getSelectedFile().getName();
            String extension = filename.substring(filename.lastIndexOf("."), filename.length());
            String filename_only = filename.substring(0, filename.lastIndexOf("."));

            if (!".pdf".equals(extension)) {
                JOptionPane.showMessageDialog(filechooser, "Invalid file type!!! Please choose a pdf file!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                    FileInputStream input = null;
                    
                    String filepath = file.toString();
                    String output_path = filepath.substring(0, filepath.lastIndexOf("."));
                    
                    System.out.println(filepath);
                    System.out.println(filename_only);
                    System.out.println(output_path);

                    
                    String path = Test.class.getProtectionDomain().getCodeSource().getLocation().getPath();
                    
                    try {
                        String decodedPath = URLDecoder.decode(path, "UTF-8");
                        System.out.println(decodedPath);
                        String command = "java -jar " + decodedPath + " -p all -o " + output_path + ".csv " + filepath;
                        System.out.println(command);
                        
                        Process process = Runtime.getRuntime().exec(command);

                        System.out.println("Tabula DONE!");
                        
                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                    

                    

            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        JFileChooser filechooser = new javax.swing.JFileChooser();

        int returnVal = filechooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = filechooser.getSelectedFile();
            String filename = filechooser.getSelectedFile().getName();
            String extension = filename.substring(filename.lastIndexOf("."), filename.length());

            if (!".csv".equals(extension)) {
                JOptionPane.showMessageDialog(filechooser, "Invalid file type!!! Please choose a csv file!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                BufferedReader br = null;
                try {
                    String[] columnNames = new String[0];
                    Object[][] data = new Object[0][0];
                    String line = "";
                    String splitSign = ",";
                    
                    int i = 0;
                    //initialize the data array
                    br = new BufferedReader(
                            new FileReader(file));
                    while (br.readLine() != null) {
                        i++;
                    }
                    br.close();
                    data = new Object[i - 1][];
                    i = 0;
                    br = new BufferedReader(new FileReader(file));
                    line = br.readLine();
                    columnNames = line.split(splitSign);
                    
                    String[] rowNumber = {"#"};
                    
                    String[] newcolumnNames = new String[rowNumber.length + columnNames.length];
                    System.arraycopy(rowNumber, 0, newcolumnNames, 0, 1);
                    System.arraycopy(columnNames, 0, newcolumnNames, 1, columnNames.length);                    
                    
                    line = br.readLine();
                    while (line != null) {
                        data[i] = new Object[line.split(splitSign).length + 1];
                        data[i][0] = i + 1;
                        for (int j = 1; j < data[i].length; j++) {
                            data[i][j] = line.split(splitSign)[j - 1];
                        }
                        i++;
                        line = br.readLine();
                    }
                    
                    
                    data_view readcsvfiles = new data_view(data, newcolumnNames);
                    readcsvfiles.setTitle(filename);
                    readcsvfiles.setVisible(true);
                    readcsvfiles.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        data_entry dataentry = new data_entry();
        dataentry.setTitle("Data Entry");
        dataentry.setVisible(true);
        dataentry.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        report_view reportview = null;
        try {
            reportview = new report_view();
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        reportview.setTitle("Report View");
        reportview.setVisible(true);
        reportview.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Combined_Data_Entry";
        
            
        if (new File(dataentry_path).exists()) {
            try {
                merge_csv(dataentry_path);
            } catch (IOException ex) {
                Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
            }

            } else {
            try {
                new File(dataentry_path).mkdir();
                merge_csv(dataentry_path);
            } catch (IOException ex) {
                Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
            

                
        try {
            String execute_python_command = "python " + homedirec + "/carbide/aggregation.py";
            System.out.println(execute_python_command);
            Process p = Runtime.getRuntime().exec(execute_python_command);
        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            JFrame frame = new JFrame("Adding a new account");
            String name = JOptionPane.showInputDialog(frame, "New Account:");
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts.txt";
            JFrame error_frame = new JFrame();
            
            if ("".equals(name)) {
                JOptionPane.showMessageDialog(error_frame, "Please input an account name. It can't be NULL.", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
            } else {
                ArrayList<String> current_accounts = new ArrayList<String>();
                for (String line : Files.readAllLines(Paths.get(account_name_direc))) {
                    current_accounts.add(line);
                }
                
                if (!current_accounts.contains(name)){
                    current_accounts.add(name);

                    File f = new File(account_name_direc);
                    f.delete();

                    FileWriter writer = new FileWriter(account_name_direc);

                    for(String str: current_accounts) {
                        int j = 1;

                        if (j !=  current_accounts.size()){
                            writer.write(str + System.lineSeparator());
                        } else {
                            writer.write(str);
                        }
                    }

                    writer.close();
                } else {
                    JOptionPane.showMessageDialog(error_frame, "Account name existed!", "Error in Account Name!",JOptionPane.ERROR_MESSAGE);
                }


            }

        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        
        try {           
            
            String homedirec = System.getProperty("user.home");
            String account_name_direc = homedirec + "/carbide/accounts/accounts.txt";
            
            ArrayList<String> current_accounts = new ArrayList<String>();
            
            for (String line : Files.readAllLines(Paths.get(account_name_direc))) {
                current_accounts.add(line);

            }
            Object[] current_account = current_accounts.toArray(new Object[current_accounts.size()]);

            String nametodelete = (String) JOptionPane.showInputDialog(null, "Account to Delete:", "Delete an account", JOptionPane.QUESTION_MESSAGE, null, current_account, current_account[0]); 

            ArrayList<String> account_names = new ArrayList<String>();
                            
            if (nametodelete != null){
                
                
                for (String line : Files.readAllLines(Paths.get(account_name_direc))) {
                    if (!line.contains(nametodelete)){
                        account_names.add(line);
                    }
                }
            
                File f = new File(account_name_direc);
                f.delete();
            
                FileWriter writer = new FileWriter(account_name_direc);
                
                for(String str: account_names) {
                    int j = 1;
                    if (j !=  account_names.size()){
                        writer.write(str + System.lineSeparator());
                    } else {
                        writer.write(str);
                    }
                }
                writer.close();
            }


        } catch (IOException ex) {
            Logger.getLogger(account_manager_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
        
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        
        account_view account = new account_view();
        account.setTitle("Accounts");
        account.setVisible(true);
        account.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        allocation_view allocation_weights = new allocation_view();
        allocation_weights.setTitle("Allocation Weight");
        allocation_weights.setVisible(true);
        allocation_weights.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        
        
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    public void merge_csv(String combined_entry) throws FileNotFoundException, IOException{
        
        String headers = null;
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Data_Entry";
        File folder = new File(dataentry_path);
        File[] listOfFiles = folder.listFiles();
        ArrayList<File> files = new ArrayList<File>();
        
        for (int i = 0; i < listOfFiles.length; i++){
            
            if (listOfFiles[i].getName().contains(".csv")) {
                files.add(listOfFiles[i]);
            }
    
        }
        
        File folder_to_delete = new File(combined_entry);
        File[] listOfFiles_to_delete = folder_to_delete.listFiles();
        
        for (int i = 0; i < listOfFiles_to_delete.length; i++){
            
            if (listOfFiles_to_delete[i].getName().contains(".csv")) {
                listOfFiles_to_delete[i].delete();
            }
    
        }
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH_mm_ss");
        Date date = new Date();
        String csvFinal = combined_entry + "/" +  dateFormat.format(date) +"-combined.csv";
        
        File fileOutput = new File(csvFinal);
        if (fileOutput.exists()) {
            fileOutput.delete();
        }
        try {
            fileOutput.createNewFile();
        } catch (IOException e) {
        }
        
        Iterator<File> iterFiles = files.iterator();
        BufferedWriter fileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFinal), "UTF-8"));
        
        String firstFile = null;
        for (int i = 0; i < listOfFiles.length; i++) {
 
            if (listOfFiles[i].getName().contains(".csv")) {
                firstFile = listOfFiles[i].getPath();
                break;
            }
        }
        
        Scanner scanner = new Scanner(new File(firstFile));
        
        if (scanner.hasNextLine()) {
            headers = scanner.nextLine();
        }
        
        scanner.close();
        
        fileWriter.write(headers);
        fileWriter.newLine();
        
        BufferedReader fileReader;
        
        while (iterFiles.hasNext()) {

            String line;
            String[] firstLine;

            File nextFile = iterFiles.next();
            fileReader = new BufferedReader(new FileReader(nextFile));

            if ((line = fileReader.readLine()) != null)
                firstLine = line.split(";");

            while ((line = fileReader.readLine()) != null) {
                fileWriter.write(line);
                fileWriter.newLine();
            }
            fileReader.close();
        }

        fileWriter.close();
    }
    
    public void aggregatemerge_csv(String combined_entry) throws FileNotFoundException, IOException{
        
        String headers = null;
        
        String homedirec = System.getProperty("user.home");
        String dataentry_path = homedirec + "/carbide/Combined_Data_Entry/separate_aggregated_accounts";
        File folder = new File(dataentry_path);
        File[] listOfFiles = folder.listFiles();
        ArrayList<File> files = new ArrayList<File>();
        
        for (int i = 0; i < listOfFiles.length; i++){
            
            if (listOfFiles[i].getName().contains(".csv")) {
                files.add(listOfFiles[i]);
            }
    
        }
        
        File folder_to_delete = new File(combined_entry);
        File[] listOfFiles_to_delete = folder_to_delete.listFiles();
        
        for (int i = 0; i < listOfFiles_to_delete.length; i++){
            
            if (listOfFiles_to_delete[i].getName().contains(".csv")) {
                listOfFiles_to_delete[i].delete();
            }
    
        }
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH_mm_ss");
        Date date = new Date();
        String csvFinal = combined_entry + "/" +  dateFormat.format(date) +"-aggregated-combined.csv";
        
        File fileOutput = new File(csvFinal);
        if (fileOutput.exists()) {
            fileOutput.delete();
        }
        try {
            fileOutput.createNewFile();
        } catch (IOException e) {
        }
        
        Iterator<File> iterFiles = files.iterator();
        BufferedWriter fileWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(csvFinal), "UTF-8"));
        
        String firstFile = null;
        for (int i = 0; i < listOfFiles.length; i++) {
 
            if (listOfFiles[i].getName().contains(".csv")) {
                firstFile = listOfFiles[i].getPath();
                break;
            }
        }
        
        Scanner scanner = new Scanner(new File(firstFile));
        
        if (scanner.hasNextLine()) {
            headers = scanner.nextLine();
        }
        
        scanner.close();
        
        fileWriter.write(headers);
        fileWriter.newLine();
        
        BufferedReader fileReader;
        
        while (iterFiles.hasNext()) {

            String line;
            String[] firstLine;

            File nextFile = iterFiles.next();
            fileReader = new BufferedReader(new FileReader(nextFile));

            if ((line = fileReader.readLine()) != null)
                firstLine = line.split(";");

            while ((line = fileReader.readLine()) != null) {
                fileWriter.write(line);
                fileWriter.newLine();
            }
            fileReader.close();
        }

        fileWriter.close();
    }

    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
